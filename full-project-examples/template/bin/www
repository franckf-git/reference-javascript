#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http')
const app = require('./../app')
const config = require('./../config')
const debug = require('debug')(`${config.DOMAIN}:server`)
const { initialisationBDDAuthentification } = require('./../applications/authentification/initialisationBDD')
const { initialisationBDDStatistiques } = require('./../applications/statistiques/initialisationBDD')
const { initialisationBDDAide } = require('./../applications/aide/initialisationBDD')
const { nettoyageLiensMailsetMdpOublies } = require('./../applications/utils/crontab')
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.PORT)
app.set('port', port)

/**
 * Init all tables
 */

initialisationBDDAuthentification()
initialisationBDDStatistiques()
initialisationBDDAide()

/**
 * Crontab
 */

nettoyageLiensMailsetMdpOublies()

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
  console.log(`Server running at http://${config.DOMAIN}:${port}/`)
}
